{"name":"Serious","tagline":"Serious is a simple, file-driven blog engine inspired by toto and driven by sinatra with an emphasis on easy setup","body":"= Serious\r\n\r\nSerious is a blog engine inspired by other filesystem-based engines like jekyll (http://jekyllrb.com/) \r\nand toto (http://cloudhead.io/toto) and is based upon Sinatra and rack, thus can be hosted\r\nvery easily (and for free) on heroku (http://heroku.com). \r\n\r\nThe articles are stored in plain text files with an opinionated naming scheme which is used for\r\ngetting the date and permalink of your article: <code>articles/2010-02-14-will-you-be-my-valentine.txt</code>\r\n\r\nThe actual content of the article is lazy-loaded only when accessed, so things don't get messy when a lot\r\nof articles has to be maintained. Articles consist of a YAML front, an optional summary and the body,\r\nso a basic article looks something like this:\r\n\r\n  title: My shiny article\r\n  author: Christoph Olszowka\r\n  \r\n  Some nice summary.\r\n  ~\r\n  ## Some content. You can use markdown in your articles, and also <%= \"erb\" %>\r\n  <% highlight do %>\r\n    puts \"it will also syntax-highlight your codes\"\r\n  <% end %>\r\n  \r\nThere are quite a few assumptions made by this format: You have to specify your title in yaml format\r\nupfront. You can also specify an author for this article. If you don't, it will fall-back to the\r\ndefault one (see configuration). Then two newlines must follow to separate the yaml from the actual\r\ncontent. After this, you can type your blog post. If you want a summary, add in the summary/body\r\ndelimiter \"~\", so Serious knows what you want.\r\n  \r\nSerious makes use of StupidFormatter (http://github.com/colszowka/stupid_formatter) for formatting\r\nyour articles, so you get ERb, Markdown and Coderay syntax highlighting for free and can customize\r\nthe processing chain to your liking, add custom ERb helpers and so on. See the documentation of\r\nstupid_formatter (http://rdoc.info/projects/colszowka/stupid_formatter) to learn how to \r\ncustomize the formatting.\r\n\r\nArticles with a date in the future will not appear on the site, thus allowing you to draft or schedule \r\nposts. Note that you can also create a folder to store your drafts and once they are ready to be \r\npublished just move it to the <code>articles</code> folder (this folder name can be changed in your \r\nconfiguration).\r\n\r\n== Getting started\r\n\r\nInstall the gem:\r\n  \r\n  sudo gem install serious\r\n\r\nYou can use the supplied generator using the <code>serious</code> executable provided with the gem.\r\nType <code>serious</code> in your shell to see the available options.\r\n\r\nBy default the generator will create the app with gem-based public and views directories and initialize\r\na git repository. To host your app on heroku instantly, supply the --heroku option, which will use\r\nthe heroku gem to create your app and push it to heroku via git. Type:\r\n\r\n  serious my-fancy-blog --heroku\r\n  \r\nAnd you can go to http://my-fancy-blog.heroku.com to see your new blog!\r\n\r\n== The setup\r\n\r\nThe directory basic directory structure of your Serious site would be something like this:\r\n\r\n  serious_blog/\r\n  - articles\r\n    - 2010-02-14-will-you-be-my-valentine.txt\r\n  - pages\r\n    - about.txt\r\n  - config.ru\r\n  - Gemfile\r\n  - Rakefile\r\n  \r\nThe config.ru is pretty straight-forward if you want to stick to the defaults:\r\n\r\n  require 'rubygems'\r\n  require 'bundler'\r\n  Bundler.require\r\n  Serious.set :title, \"My Sweet Little Blog\"\r\n  Serious.set :author, \"Christoph Olszowka\"\r\n  Serious.set :url, 'http://mysweetlittleblog.heroku.com'\r\n  run Serious\r\n  \r\nThe Gemfile to resolve dependencies (i.e. when hosting on heroku)\r\n\r\n  source :rubygems\r\n  gem \"serious\"\r\n  \r\nThe Rakefile, which is obviously totally optional but highly recommended looks like this:\r\n\r\n  require 'serious'\r\n  require 'serious/tasks'\r\n  \r\n== Supported Rubies\r\n\r\nThe gem tests are run against 1.8.7, REE, 1.9.1 and 1.9.2, so Serious should run fine at least\r\non those interpreters - it is highly recommended to go with 1.9.2 though.\r\n  \r\n== Creating heroku app manually\r\n\r\nAssuming you've got the heroku gem installed and set up and you've set up git for your blog with\r\n<code>git init</code> or sticked with the generator, which created your git repo, you can now do:\r\n  \r\n  heroku create mysweetlittleblog\r\n  git push heroku master\r\n  \r\nPoint your browser to the url, and bang, you're ready!\r\n\r\n== Running locally\r\n\r\nYou might also want to test your blog locally. Use the <code>rake server</code> command inside\r\nyour site's directory.\r\n\r\nYou can also use thin (<code>sudo gem install thin</code>) with:\r\n\r\n  thin -R config.ru start\r\n  \r\nGo to <code>localhost:3000</code> and enjoy.\r\n\r\n== Archives\r\n\r\nThe whole archives can be accessed at <code>/archives</code>. Archives by year, month and date\r\nare available at <code>/2009</code> (all of 2009), <code>/2009/05</code> (May 2009), \r\n<code>/2009/05/15</code> (May 15th 2009).\r\n\r\n== Static pages\r\n\r\nStatic pages are quite similar to blog articles, in that their formatting and processing is the same.\r\nThey have a yaml front matter, content that gets piped through the StupidFormatter and so on.\r\nThe filename sans the extension serves as the permalink, pages can be reached via \r\n<code>/pages/PERMALINK</code>, so the content in pages/about.txt will be served at \r\n<code>/pages/about</code>\r\n\r\n== Rake tasks\r\n\r\nIf you've set up the Rakefile in your site's main directory like mentioned above (this happens \r\nautomatically when generating with the <code>serious</code> executable), you have the following \r\ntasks available:\r\n\r\n  rake article:create    # Creates a new article\r\n  rake article:validate  # Validates all articles, making sure they can be processed correctly\r\n  rake server            # Runs a server hosting your site on localhost:3000 using rackup\r\n\r\nThe default is article:create, so to create a new article, just type <code>rake</code>,\r\nspecify your title and optionally a date and you're ready to go!\r\n\r\nIt's highly recommended that you run the <code>article:validate</code> task before publishing,\r\nsince it will make sure everything gets processed correctly.\r\n\r\nPlease be aware that you have to run the Rake tasks from the top level directory (where your\r\n<code>config.ru</code> file resides) since the config.ru file will be loaded to reflect your\r\nsettings.\r\n\r\n== Creating routes by extending Serious\r\n\r\nIf you'd like to create your own routes or use other features from Sinatra you can do that by \r\nextending Serious. Create a ruby file in the root of your Serious blog. We'll create our own \r\nclass that extends Serious. Name the file and class however you like. For the following example \r\nwe'll go with a filename of app.rb and a class named MyApp.\r\n\r\n  require 'serious'\r\n    \r\n    class MyApp < Serious\r\n      # define your custom routes\r\n    end\r\n    \r\n  end\r\n\r\nFrom there all that is left is to update the config.ru file with the following:\r\n\r\n  require 'serious'\r\n  require './app'\r\n  \r\n  # Serious config overrides here if any...\r\n  \r\n  run MyApp\r\n\r\n== Comments with disqus\r\n\r\nYou can activate comments for articles very easily with disqus (http://disqus.com) by setting\r\nthe <code>disqus</code> property to your disqus-id (e.g. 'myfancysite'). Disqus developer mode will\r\nbe automatically activated for requests served by http://localhost so you can preview your settings\r\nand layout properly.\r\n\r\n  Serious.set :disqus, 'yourid'\r\n  \r\n== Google Analytics\r\n\r\nYou can activate Google Analytics by setting the <code>google_analytics</code> property to your \r\ntracker id (something like 'UA-123123-5'). The required code will then be included to your site.\r\nFor requests served from http://localhost, the inclusion is skipped.\r\n\r\n  Serious.set :google_analytics, 'UA-123123-5'\r\n\r\n== Configuration options\r\n\r\nInside your config.ru, you can customize the settings for your Serious site.\r\n\r\n=== Custom view templates or public folder\r\n\r\n==== Changing the path to the public folder\r\n  \r\nSay you want to stick with the default view templates, but are willing to customize the css\r\nto make things prettier. You can do so. Get the provided css from <code>lib/serious/site/public</code>\r\nand point Serious to your new public folder, which assumingly lies in the current working directory\r\n(which is where your config.ru file is)\r\n  \r\n  Serious.set :public, File.join(Dir.getwd, 'public')\r\n  \r\nSerious will now serve the public directory from your custom location, but still get the views\r\nprovided with the gem.\r\n\r\n==== Changing the path to the views\r\n\r\nAccordingly, if you want to stick with the default css, but want to customize the templates (would anyone\r\nwant to do this?), specify the views path and get the provided ones from the gem as a starting point.\r\n\r\n  Serious.set :views, File.join(Dir.getwd, 'views')\r\n  \r\n==== Setting the root\r\n\r\nThe most likely case though will surely be that you want to move both <code>public</code> and \r\n<code>views</code> into your site. Again, just copy over the provided assets from the gems\r\n<code>lib/serious/site/</code> folder into your own site and modify them to your liking.\r\nYou'll have to specify a new root for your site, set to the current working directory, where\r\nyour config.ru resides:\r\n\r\n  Serious.set :root, Dir.getwd\r\n  \r\nNote that you do not have to specify the views and public folders separately, they'll be hosted\r\nfrom the roots views and public subdirectory.\r\n\r\n=== Setting the articles path\r\n\r\nYou want your articles hosted from your home directory or fancy a different folder name?\r\nUse the :articles property, which defaults to the articles subdirectory of the current\r\nworking directory (a.k.a. where your config.ru sits)\r\n\r\n  Serious.set :articles, '/home/youruser/myblogposts'\r\n  \r\n=== Setting the pages path\r\n\r\nSimilarly to the articles path, the pages will be served from your sites working directory's\r\nsubdirectory <code>pages</code>. Customize this with:\r\n\r\n  Serious.set :pages, '/home/youruser/mystaticpages'\r\n  \r\n=== The title\r\n\r\nThe title is used for your atom feed, the site name and so on. It defaults to 'Serious' and you \r\ncan specify it with:\r\n\r\n  Serious.set :title, \"My Sweet Little Blog\"\r\n\r\n=== The author\r\n\r\nIf you don't want to specify the author for each article separately in the YAML front matter,\r\nyou can define the blog author, which will be used as a fall-back when no custom article author\r\nis given in the YAML. It defaults to 'unknown'\r\n\r\n  Serious.set :author, \"Christoph Olszowka\"\r\n  \r\n=== The url\r\n\r\nWell, your site has to know where it lives to provide proper links in your atom feed. Configure this\r\nwith the url setting, which defaults to 'http://localhost:3000'\r\n  \r\n  Serious.set :url, 'http://localhost:3000'\r\n\r\n=== The date format\r\n\r\nThere is a helper in the Date class for formatting dates according to the configuration specified\r\nin Serious.date_format and which is used in the front-end. It defaults to \"%B %o %Y\", which expands\r\nto (i.e.) 'December 24th, 2009'. Notice that %o is a custom flag that is not built-in in the default\r\n<code>strftime</code> method of Date. It returns the ordinal name of the day. Customize with:\r\n\r\n  Serious.set :date_format, \"%Y-%m-%d\"\r\n  \r\n=== Disqus comments\r\n\r\nTo enable disqus comments, specify your disqus id with the disqus property. Disqus is disabled \r\nby default. See section above for more information on disqus and comments.\r\n\r\n  Serious.set :disqus, 'yourdisqusid'\r\n  \r\n=== Google Analytics\r\n\r\nTo enable google analytics, specify your tracker id at the property <code>google_analytics</code>.\r\nSee section above for more information on Google Analytics.\r\n\r\n  Serious.set :google_analytics, 'UA-123123-5'\r\n  \r\n=== Custom feed url in layout\r\n\r\nIf you want to specify a different feed url for the head link tag, for example to point your readers\r\nto Feedburner, you can do so by specifying the <code>feed_url</code> option and setting up your\r\nfeed to be burned by feedburner based upon <code>http://yoururl.com/atom.xml</code>.\r\n\r\n  Serious.set :feed_url, 'http://feeds.feedburner.com/myfeedurl'  \r\n  \r\n=== Displayed items\r\n\r\nYou can specify how many items you want displayed across your site:\r\n\r\n==== Amount of feed items\r\n\r\nTo customize the amount of items in your atom feed (living under /atom.xml), set the \r\nitems_in_feed property to an integer. This defaults to 25.\r\n  \r\n  Serious.set :items_in_feed, 50\r\n  \r\n==== Amount of items with summary on index\r\n\r\nOn your index page, the most recent items will be displayed including the summary (or the whole\r\npost if you did not use the summary/body delimiter). This defaults to 3 items, but can be customized:\r\n\r\n  Serious.set :items_on_index, 5\r\n  \r\n==== Amount of archive items on index\r\n\r\nBelow the items with summaries on your main page, there's also a list of 'archived' items, which\r\nonly includes the title and date. This defaults to 10 items, but can be customized as well:\r\n\r\n  Serious.set :archived_on_index, 10\r\n  \r\n=== Cache timeout\r\n\r\nAll pages served are automatically getting a Cache-Control header, so they get cached in your\r\nvisitor's browsers as well as in Varnish on Heroku (http://docs.heroku.com/http-caching) \r\n(or some similar tool when you host yourself). The timeout is set to 300 seconds by default, but\r\ncan be customized with:\r\n\r\n  Serious.set :cache_timeout, 300\r\n  \r\n=== Article formatting\r\n\r\nYou can define the formatting chain for StupidFormatter with:\r\n\r\n  StupidFormatter.chain = [StupidFormatter::RDiscount]\r\n\r\nYou'll surely want to read the documentation of StupidFormatter (http://github.com/colszowka/stupid_formatter)\r\nto learn how to add your own formatters or erb helpers.\r\n\r\n== TODO\r\n\r\n* unescaped special chars in yaml front matter can lead to errors\r\n* text not readable in android\r\n* valid xhtml in demo setup\r\n* make summary delimiter configurable\r\n* improve caching\r\n* make it possible to host in subdirectories\r\n* allow for choice between erb/haml templates\r\n\r\n== Note on Patches/Pull Requests\r\n \r\n* Fork the project.\r\n* Make your feature addition or bug fix.\r\n* Add tests for it. This is important so I don't break it in a\r\n  future version unintentionally.\r\n* Commit, do not mess with rakefile, version, or history.\r\n  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)\r\n* Send me a pull request. Bonus points for topic branches.\r\n\r\n== Thanks\r\n\r\nAlexis Sellier for toto, the main inspiration for this gem\r\nRyan Bates for the great coderay css\r\n\r\n== Copyright\r\n\r\nCopyright (c) 2010 Christoph Olszowka. See LICENSE for details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}